============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py first driver inits
1692284135570,1630,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284138399,2828,selenium_login:login_and_view_dashboard,Success,True,
1692284138399,4459,selenium_login,Success,True,
.test_0_selenium_a_login,Total:1 Passed:1 Failed:0
1692284141045,2613,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:2 Passed:2 Failed:0
1692284141710,664,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:3 Passed:3 Failed:0
1692284144035,2323,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:4 Passed:4 Failed:0
1692284145262,1209,selenium_create_issue:open_quick_create,Success,True,
1692284146350,590,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284146350,1087,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284146350,2297,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:5 Passed:5 Failed:0
1692284147294,925,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284148561,498,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284148561,2191,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:6 Passed:6 Failed:0
1692284148796,233,selenium_save_comment:open_comment_form,Success,True,
1692284152119,2727,selenium_save_comment:submit_form,Success,True,
1692284152119,3557,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:7 Passed:7 Failed:0
1692284154720,2599,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:8 Passed:8 Failed:0
1692284157502,2780,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:9 Passed:9 Failed:0
1692284160659,3155,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:10 Passed:10 Failed:0
1692284161633,972,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:11 Passed:11 Failed:0
1692284162004,369,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:12 Passed:12 Failed:0
1692284162535,530,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:13 Passed:13 Failed:0
1692284162924,387,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:14 Passed:14 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 29.80s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284163102,132,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284168443,5340,selenium_login:login_and_view_dashboard,Success,True,
1692284168443,5473,selenium_login,Success,True,
.test_0_selenium_a_login,Total:15 Passed:15 Failed:0
1692284169461,898,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:16 Passed:16 Failed:0
1692284169794,332,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:17 Passed:17 Failed:0
1692284170595,799,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:18 Passed:18 Failed:0
1692284171292,644,selenium_create_issue:open_quick_create,Success,True,
1692284172411,590,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284172411,1119,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284172411,1764,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:19 Passed:19 Failed:0
1692284172827,389,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284174038,466,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284174038,1600,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:20 Passed:20 Failed:0
1692284174258,218,selenium_save_comment:open_comment_form,Success,True,
1692284175522,661,selenium_save_comment:submit_form,Success,True,
1692284175522,1482,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:21 Passed:21 Failed:0
1692284177177,1653,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:22 Passed:22 Failed:0
1692284178340,1162,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:23 Passed:23 Failed:0
1692284179107,765,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:24 Passed:24 Failed:0
1692284179879,770,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:25 Passed:25 Failed:0
1692284180126,246,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:26 Passed:26 Failed:0
1692284180592,464,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:27 Passed:27 Failed:0
1692284181005,412,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:28 Passed:28 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 18.05s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284181271,218,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284181836,564,selenium_login:login_and_view_dashboard,Success,True,
1692284181836,784,selenium_login,Success,True,
.test_0_selenium_a_login,Total:29 Passed:29 Failed:0
1692284182446,556,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:30 Passed:30 Failed:0
1692284182785,337,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:31 Passed:31 Failed:0
1692284183514,727,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:32 Passed:32 Failed:0
1692284184252,699,selenium_create_issue:open_quick_create,Success,True,
1692284185422,623,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284185422,1169,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284185422,1869,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:33 Passed:33 Failed:0
1692284185873,410,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284187104,473,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284187104,1641,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:34 Passed:34 Failed:0
1692284187316,210,selenium_save_comment:open_comment_form,Success,True,
1692284188553,627,selenium_save_comment:submit_form,Success,True,
1692284188553,1448,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:35 Passed:35 Failed:0
1692284190067,1512,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:36 Passed:36 Failed:0
1692284190865,796,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:37 Passed:37 Failed:0
1692284191616,750,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:38 Passed:38 Failed:0
1692284192380,762,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:39 Passed:39 Failed:0
1692284192610,228,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:40 Passed:40 Failed:0
1692284193090,478,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:41 Passed:41 Failed:0
1692284193427,336,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:42 Passed:42 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 12.39s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284193601,129,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284194130,528,selenium_login:login_and_view_dashboard,Success,True,
1692284194130,659,selenium_login,Success,True,
.test_0_selenium_a_login,Total:43 Passed:43 Failed:0
1692284194797,550,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:44 Passed:44 Failed:0
1692284195128,329,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:45 Passed:45 Failed:0
1692284195902,772,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:46 Passed:46 Failed:0
1692284196630,675,selenium_create_issue:open_quick_create,Success,True,
1692284197821,602,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284197821,1190,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284197821,1866,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:47 Passed:47 Failed:0
1692284198268,393,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284199546,497,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284199547,1672,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:48 Passed:48 Failed:0
1692284199764,215,selenium_save_comment:open_comment_form,Success,True,
1692284201015,637,selenium_save_comment:submit_form,Success,True,
1692284201015,1467,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:49 Passed:49 Failed:0
1692284202657,1640,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:50 Passed:50 Failed:0
1692284203430,771,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:51 Passed:51 Failed:0
1692284204198,766,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:52 Passed:52 Failed:0
1692284204968,768,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:53 Passed:53 Failed:0
1692284205195,225,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:54 Passed:54 Failed:0
1692284205715,519,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:55 Passed:55 Failed:0
1692284206067,350,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:56 Passed:56 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 12.61s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284206253,140,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284208269,2015,selenium_login:login_and_view_dashboard,Success,True,
1692284208269,2156,selenium_login,Success,True,
.test_0_selenium_a_login,Total:57 Passed:57 Failed:0
1692284208898,511,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:58 Passed:58 Failed:0
1692284209175,276,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:59 Passed:59 Failed:0
1692284209909,732,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:60 Passed:60 Failed:0
1692284210676,683,selenium_create_issue:open_quick_create,Success,True,
1692284211846,606,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284211847,1169,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284211847,1854,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:61 Passed:61 Failed:0
1692284212315,401,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284213555,476,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284213555,1641,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:62 Passed:62 Failed:0
1692284213776,219,selenium_save_comment:open_comment_form,Success,True,
1692284215026,637,selenium_save_comment:submit_form,Success,True,
1692284215026,1469,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:63 Passed:63 Failed:0
1692284216795,1767,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:64 Passed:64 Failed:0
1692284217582,785,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:65 Passed:65 Failed:0
1692284218720,1136,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:66 Passed:66 Failed:0
1692284220255,1533,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:67 Passed:67 Failed:0
1692284222535,2279,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:68 Passed:68 Failed:0
1692284223489,952,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:69 Passed:69 Failed:0
1692284224231,741,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:70 Passed:70 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 18.13s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284224470,188,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284225097,626,selenium_login:login_and_view_dashboard,Success,True,
1692284225097,816,selenium_login,Success,True,
.test_0_selenium_a_login,Total:71 Passed:71 Failed:0
1692284225770,500,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:72 Passed:72 Failed:0
1692284226163,391,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:73 Passed:73 Failed:0
1692284226896,731,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:74 Passed:74 Failed:0
1692284227660,688,selenium_create_issue:open_quick_create,Success,True,
1692284228914,611,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284228914,1253,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284228914,1942,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:75 Passed:75 Failed:0
1692284229424,431,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284231932,1601,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284231932,2939,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:76 Passed:76 Failed:0
1692284233054,1121,selenium_save_comment:open_comment_form,Success,True,
1692284235823,2153,selenium_save_comment:submit_form,Success,True,
1692284235823,3890,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:77 Passed:77 Failed:0
1692284239561,3736,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:78 Passed:78 Failed:0
1692284240551,988,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:79 Passed:79 Failed:0
1692284241395,842,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:80 Passed:80 Failed:0
1692284242192,796,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:81 Passed:81 Failed:0
1692284242453,259,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:82 Passed:82 Failed:0
1692284243006,551,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:83 Passed:83 Failed:0
1692284245403,2396,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:84 Passed:84 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 21.14s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284245654,207,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284249054,3399,selenium_login:login_and_view_dashboard,Success,True,
1692284249054,3607,selenium_login,Success,True,
.test_0_selenium_a_login,Total:85 Passed:85 Failed:0
1692284250353,1149,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:86 Passed:86 Failed:0
1692284250869,514,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:87 Passed:87 Failed:0
1692284251869,998,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:88 Passed:88 Failed:0
1692284252838,877,selenium_create_issue:open_quick_create,Success,True,
1692284254144,612,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284254144,1305,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284254144,2183,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:89 Passed:89 Failed:0
1692284254878,643,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284256432,639,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284256434,2199,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:90 Passed:90 Failed:0
1692284256739,304,selenium_save_comment:open_comment_form,Success,True,
1692284259038,1680,selenium_save_comment:submit_form,Success,True,
1692284259038,2602,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:91 Passed:91 Failed:0
1692284267208,8169,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:92 Passed:92 Failed:0
1692284268101,892,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:93 Passed:93 Failed:0
1692284268892,789,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:94 Passed:94 Failed:0
1692284270404,1510,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:95 Passed:95 Failed:0
1692284270665,260,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:96 Passed:96 Failed:0
1692284271187,521,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:97 Passed:97 Failed:0
1692284272790,1601,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:98 Passed:98 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 27.36s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284273023,189,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284332409,59385,selenium_login:login_and_view_dashboard,Success,True,
1692284332409,59575,selenium_login,Success,True,
.test_0_selenium_a_login,Total:99 Passed:99 Failed:0
1692284333898,1338,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:100 Passed:100 Failed:0
1692284334575,675,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:101 Passed:101 Failed:0
1692284335635,1058,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:102 Passed:102 Failed:0
1692284336550,818,selenium_create_issue:open_quick_create,Success,True,
1692284341458,4223,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284341458,4907,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284341458,5726,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:103 Passed:103 Failed:0
1692284343050,1500,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284345205,1328,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284345205,3654,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:104 Passed:104 Failed:0
1692284349888,4681,selenium_save_comment:open_comment_form,Success,True,
1692284358007,6399,selenium_save_comment:submit_form,Success,True,
1692284358007,12801,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:105 Passed:105 Failed:0
1692284367532,9524,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:106 Passed:106 Failed:0
1692284368797,1264,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:107 Passed:107 Failed:0
1692284369760,961,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:108 Passed:108 Failed:0
1692284372648,2887,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:109 Passed:109 Failed:0
1692284373108,458,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:110 Passed:110 Failed:0
1692284374069,959,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:111 Passed:111 Failed:0
1692284374591,520,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:112 Passed:112 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 101.77s (0:01:41) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284374945,308,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284375656,711,selenium_login:login_and_view_dashboard,Success,True,
1692284375656,1020,selenium_login,Success,True,
.test_0_selenium_a_login,Total:113 Passed:113 Failed:0
1692284376398,535,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:114 Passed:114 Failed:0
1692284376804,404,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:115 Passed:115 Failed:0
1692284377659,853,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:116 Passed:116 Failed:0
1692284378542,765,selenium_create_issue:open_quick_create,Success,True,
1692284394574,15494,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284394574,16032,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284394574,16797,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:117 Passed:117 Failed:0
1692284399891,5204,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284404019,2803,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284404019,9331,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:118 Passed:118 Failed:0
1692284405930,1909,selenium_save_comment:open_comment_form,Success,True,
1692284410960,3297,selenium_save_comment:submit_form,Success,True,
1692284410961,6940,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:119 Passed:119 Failed:0
1692284421982,11020,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:120 Passed:120 Failed:0
1692284422982,998,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:121 Passed:121 Failed:0
1692284424257,1273,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:122 Passed:122 Failed:0
1692284425732,1473,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:123 Passed:123 Failed:0
1692284426137,403,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:124 Passed:124 Failed:0
1692284426898,759,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:125 Passed:125 Failed:0
1692284427513,613,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:126 Passed:126 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 52.89s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284427824,267,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284428647,822,selenium_login:login_and_view_dashboard,Success,True,
1692284428647,1090,selenium_login,Success,True,
.test_0_selenium_a_login,Total:127 Passed:127 Failed:0
1692284429481,648,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:128 Passed:128 Failed:0
1692284430109,627,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:129 Passed:129 Failed:0
1692284431354,1244,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:130 Passed:130 Failed:0
1692284432652,1149,selenium_create_issue:open_quick_create,Success,True,
1692284445168,11898,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284445168,12515,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284445168,13665,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:131 Passed:131 Failed:0
1692284447406,2092,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284450714,1403,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284450714,5400,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:132 Passed:132 Failed:0
1692284451873,1158,selenium_save_comment:open_comment_form,Success,True,
1692284456853,3213,selenium_save_comment:submit_form,Success,True,
1692284456853,6137,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:133 Passed:133 Failed:0
1692284465457,8603,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:134 Passed:134 Failed:0
1692284467144,1685,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:135 Passed:135 Failed:0
1692284468446,1300,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:136 Passed:136 Failed:0
1692284470168,1721,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:137 Passed:137 Failed:0
1692284470760,591,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:138 Passed:138 Failed:0
1692284471463,701,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:139 Passed:139 Failed:0
1692284472781,1315,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:140 Passed:140 Failed:0


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 45.24s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284473132,308,selenium_login:open_login_page,Success,True,
1692284559929,86796,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692284559929,87105,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209714', 'issue_key': 'AAFAIA-4206', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692284472.8233418
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692284559.9287906
timing = '87105'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:141 Passed:140 Failed:1
stest_1_selenium_view_project_summary,Total:142 Passed:140 Failed:1
stest_1_selenium_browse_projects_list,Total:143 Passed:140 Failed:1
stest_1_selenium_browse_boards_list,Total:144 Passed:140 Failed:1
stest_1_selenium_create_issue,Total:145 Passed:140 Failed:1
stest_1_selenium_edit_issue,Total:146 Passed:140 Failed:1
stest_1_selenium_save_comment,Total:147 Passed:140 Failed:1
stest_1_selenium_search_jql,Total:148 Passed:140 Failed:1
stest_1_selenium_view_backlog_for_scrum_board,Total:149 Passed:140 Failed:1
stest_1_selenium_view_scrum_board,Total:150 Passed:140 Failed:1
stest_1_selenium_view_kanban_board,Total:151 Passed:140 Failed:1
stest_1_selenium_view_dashboard,Total:152 Passed:140 Failed:1
stest_1_selenium_view_issue,Total:153 Passed:140 Failed:1
stest_2_selenium_z_log_out,Total:154 Passed:140 Failed:1


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209714', 'issue_key': 'AAFAIA-4206', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692284472.8233418
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692284559.9287906
timing = '87105'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 147.50s (0:02:27) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284627299,6943,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284688245,60945,selenium_login:login_and_view_dashboard,Success,True,
1692284688245,67890,selenium_login,Success,True,
.test_0_selenium_a_login,Total:155 Passed:141 Failed:1
1692284695048,6663,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:156 Passed:142 Failed:1
1692284696836,1786,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:157 Passed:143 Failed:1
1692284698852,2014,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:158 Passed:144 Failed:1
1692284703326,4326,selenium_create_issue:open_quick_create,Success,True,
1692284706568,2694,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284706568,3241,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284706568,7568,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:159 Passed:145 Failed:1
1692284708773,2098,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284710804,1156,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284710804,4129,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:160 Passed:146 Failed:1
1692284711797,991,selenium_save_comment:open_comment_form,Success,True,
1692284714964,2511,selenium_save_comment:submit_form,Success,True,
1692284714964,4159,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:161 Passed:147 Failed:1
1692284718965,3999,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:162 Passed:148 Failed:1
1692284719916,950,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:163 Passed:149 Failed:1
1692284720949,1031,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:164 Passed:150 Failed:1
1692284722471,1520,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:165 Passed:151 Failed:1
1692284722913,440,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:166 Passed:152 Failed:1
1692284723745,830,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:167 Passed:153 Failed:1
1692284724290,543,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:168 Passed:154 Failed:1


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 103.95s (0:01:43) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284724835,501,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692284762924,38088,selenium_login:login_and_view_dashboard,Success,True,
1692284762924,38591,selenium_login,Success,True,
.test_0_selenium_a_login,Total:169 Passed:155 Failed:1
1692284767605,4527,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:170 Passed:156 Failed:1
1692284774020,6414,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:171 Passed:157 Failed:1
1692284786528,12506,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:172 Passed:158 Failed:1
1692284791697,5052,selenium_create_issue:open_quick_create,Success,True,
1692284795259,2690,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692284795260,3562,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692284795260,8615,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:173 Passed:159 Failed:1
1692284797873,2501,selenium_edit_issue:open_edit_issue_form,Success,True,
1692284803354,4110,selenium_edit_issue:save_edit_issue_form,Success,True,
1692284803354,7982,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:174 Passed:160 Failed:1
1692284804706,1351,selenium_save_comment:open_comment_form,Success,True,
1692284812714,7305,selenium_save_comment:submit_form,Success,True,
1692284812714,9358,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:175 Passed:161 Failed:1
1692284826692,13976,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:176 Passed:162 Failed:1
1692284829047,2354,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:177 Passed:163 Failed:1
1692284830459,1410,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:178 Passed:164 Failed:1
1692284832247,1787,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:179 Passed:165 Failed:1
1692284832726,477,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:180 Passed:166 Failed:1
1692284834245,1518,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:181 Passed:167 Failed:1
1692284835258,1012,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:182 Passed:168 Failed:1


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 110.94s (0:01:50) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284835698,396,selenium_login:open_login_page,Success,True,
1692284915680,79981,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692284915680,80378,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '208374', 'issue_key': 'AAFAIA-2866', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692284835.3016543
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692284915.6800396
timing = '80378'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:183 Passed:168 Failed:2
stest_1_selenium_view_project_summary,Total:184 Passed:168 Failed:2
stest_1_selenium_browse_projects_list,Total:185 Passed:168 Failed:2
stest_1_selenium_browse_boards_list,Total:186 Passed:168 Failed:2
stest_1_selenium_create_issue,Total:187 Passed:168 Failed:2
stest_1_selenium_edit_issue,Total:188 Passed:168 Failed:2
stest_1_selenium_save_comment,Total:189 Passed:168 Failed:2
stest_1_selenium_search_jql,Total:190 Passed:168 Failed:2
stest_1_selenium_view_backlog_for_scrum_board,Total:191 Passed:168 Failed:2
stest_1_selenium_view_scrum_board,Total:192 Passed:168 Failed:2
stest_1_selenium_view_kanban_board,Total:193 Passed:168 Failed:2
stest_1_selenium_view_dashboard,Total:194 Passed:168 Failed:2
stest_1_selenium_view_issue,Total:195 Passed:168 Failed:2
stest_2_selenium_z_log_out,Total:196 Passed:168 Failed:2


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '208374', 'issue_key': 'AAFAIA-2866', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692284835.3016543
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692284915.6800396
timing = '80378'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 140.83s (0:02:20) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692284984523,8360,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285003566,19042,selenium_login:login_and_view_dashboard,Success,True,
1692285003566,27403,selenium_login,Success,True,
.test_0_selenium_a_login,Total:197 Passed:169 Failed:2
1692285021153,17421,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:198 Passed:170 Failed:2
1692285023478,2324,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:199 Passed:171 Failed:2
1692285026701,3221,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:200 Passed:172 Failed:2
1692285030734,3862,selenium_create_issue:open_quick_create,Success,True,
1692285040599,9358,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285040599,9865,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285040599,13728,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:201 Passed:173 Failed:2
1692285051097,10378,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285056345,2761,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285056345,15626,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:202 Passed:174 Failed:2
1692285058103,1757,selenium_save_comment:open_comment_form,Success,True,
1692285063598,3659,selenium_save_comment:submit_form,Success,True,
1692285063599,7252,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:203 Passed:175 Failed:2
1692285077969,14367,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:204 Passed:176 Failed:2
1692285079624,1654,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:205 Passed:177 Failed:2
1692285080825,1199,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:206 Passed:178 Failed:2
1692285083965,3138,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:207 Passed:179 Failed:2
1692285084856,890,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:208 Passed:180 Failed:2
1692285085974,1116,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:209 Passed:181 Failed:2
1692285086678,702,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:210 Passed:182 Failed:2


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 110.53s (0:01:50) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285086976,254,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285096204,9227,selenium_login:login_and_view_dashboard,Success,True,
1692285096204,9481,selenium_login,Success,True,
.test_0_selenium_a_login,Total:211 Passed:183 Failed:2
1692285109759,13371,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:212 Passed:184 Failed:2
1692285113804,4044,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:213 Passed:185 Failed:2
1692285121235,7430,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:214 Passed:186 Failed:2
1692285141703,20280,selenium_create_issue:open_quick_create,Failed measure: selenium_create_issue:open_quick_create - TimeoutException,False,
1692285141703,20280,selenium_create_issue,Failed measure: selenium_create_issue - Exception,False,
FAction: test_1_selenium_create_issue, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '211728', 'issue_key': 'AAFAIA-6220', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_1_selenium_create_issue(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.create_issue(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:127: in create_issue
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285121.42198
error_msg = 'Failed measure: selenium_create_issue - Exception'
full_exception = Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285141.7029712
timing = '20280'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_create_issue - Exception', Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

test_1_selenium_create_issue,Total:215 Passed:186 Failed:3
1692285148626,2182,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285152821,1668,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285152821,6377,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:216 Passed:187 Failed:3
1692285167495,14672,selenium_save_comment:open_comment_form,Success,True,
1692285174322,4472,selenium_save_comment:submit_form,Success,True,
1692285174322,21499,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:217 Passed:188 Failed:3
1692285205658,31334,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:218 Passed:189 Failed:3
1692285213370,7711,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:219 Passed:190 Failed:3
1692285219887,6515,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:220 Passed:191 Failed:3
1692285231181,11292,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:221 Passed:192 Failed:3
1692285233310,2128,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:222 Passed:193 Failed:3
1692285241781,8470,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:223 Passed:194 Failed:3
1692285250654,8871,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:224 Passed:195 Failed:3


=================================== FAILURES ===================================
_________________________ test_1_selenium_create_issue _________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '211728', 'issue_key': 'AAFAIA-6220', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_1_selenium_create_issue(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.create_issue(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:127: in create_issue
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285121.42198
error_msg = 'Failed measure: selenium_create_issue - Exception'
full_exception = Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285141.7029712
timing = '20280'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_create_issue - Exception', Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_1_selenium_create_issue - Exception: ('Fa...
============= 1 failed, 13 passed, 1 warning in 163.95s (0:02:43) ==============
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285252023,1323,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285255551,3527,selenium_login:login_and_view_dashboard,Success,True,
1692285255551,4851,selenium_login,Success,True,
.test_0_selenium_a_login,Total:225 Passed:196 Failed:3
1692285258331,2587,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:226 Passed:197 Failed:3
1692285260023,1690,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:227 Passed:198 Failed:3
1692285262349,2325,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:228 Passed:199 Failed:3
1692285264899,2345,selenium_create_issue:open_quick_create,Success,True,
1692285267579,2189,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285267580,2680,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285267580,5026,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:229 Passed:200 Failed:3
1692285269223,1448,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285271594,1501,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285271594,3819,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:230 Passed:201 Failed:3
1692285272809,1213,selenium_save_comment:open_comment_form,Success,True,
1692285275404,1357,selenium_save_comment:submit_form,Success,True,
1692285275404,3808,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:231 Passed:202 Failed:3
1692285280447,5041,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:232 Passed:203 Failed:3
1692285282209,1760,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:233 Passed:204 Failed:3
1692285284142,1931,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:234 Passed:205 Failed:3
1692285286162,2019,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:235 Passed:206 Failed:3
1692285286955,791,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:236 Passed:207 Failed:3
1692285287828,871,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:237 Passed:208 Failed:3
1692285288372,543,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:238 Passed:209 Failed:3


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 14 passed, 1 warning in 37.69s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285288624,208,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285342582,53958,selenium_login:login_and_view_dashboard,Success,True,
1692285342582,54167,selenium_login,Success,True,
.test_0_selenium_a_login,Total:239 Passed:210 Failed:3
1692285345056,2271,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:240 Passed:211 Failed:3
1692285346820,1762,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:241 Passed:212 Failed:3
1692285348623,1801,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:242 Passed:213 Failed:3
1692285350779,1949,selenium_create_issue:open_quick_create,Success,True,
1692285353059,1734,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285353059,2279,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285353059,4229,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:243 Passed:214 Failed:3
1692285354709,1501,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285356809,1290,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285356809,3601,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:244 Passed:215 Failed:3
1692285357425,614,selenium_save_comment:open_comment_form,Success,True,
1692285359687,1600,selenium_save_comment:submit_form,Success,True,
1692285359687,2876,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:245 Passed:216 Failed:3
1692285363255,3567,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:246 Passed:217 Failed:3
1692285364236,979,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:247 Passed:218 Failed:3
1692285365441,1203,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:248 Passed:219 Failed:3
1692285367062,1619,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:249 Passed:220 Failed:3
1692285367609,545,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:250 Passed:221 Failed:3
1692285368950,1340,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:251 Passed:222 Failed:3
1692285369603,651,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:252 Passed:223 Failed:3


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================== 14 passed, 1 warning in 81.20s (0:01:21) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285369901,251,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285403036,33134,selenium_login:login_and_view_dashboard,Success,True,
1692285403036,33386,selenium_login,Success,True,
.test_0_selenium_a_login,Total:253 Passed:224 Failed:3
1692285416531,13279,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:254 Passed:225 Failed:3
1692285419300,2767,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:255 Passed:226 Failed:3
1692285421821,2520,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:256 Passed:227 Failed:3
1692285426458,4420,selenium_create_issue:open_quick_create,Success,True,
1692285429877,2726,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285429877,3419,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285429877,7839,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:257 Passed:228 Failed:3
1692285431738,1705,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285434568,2033,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285434568,4535,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:258 Passed:229 Failed:3
1692285435710,1140,selenium_save_comment:open_comment_form,Success,True,
1692285439143,2769,selenium_save_comment:submit_form,Success,True,
1692285439144,4574,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:259 Passed:230 Failed:3
1692285444527,5382,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:260 Passed:231 Failed:3
1692285445650,1121,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:261 Passed:232 Failed:3
1692285447011,1359,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:262 Passed:233 Failed:3
1692285448146,1133,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:263 Passed:234 Failed:3
1692285448809,661,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:264 Passed:235 Failed:3
1692285450457,1646,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:265 Passed:236 Failed:3
1692285451350,891,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:266 Passed:237 Failed:3


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================== 14 passed, 1 warning in 81.72s (0:01:21) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285451613,216,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285452419,805,selenium_login:login_and_view_dashboard,Success,True,
1692285452419,1022,selenium_login,Success,True,
.test_0_selenium_a_login,Total:267 Passed:238 Failed:3
1692285453844,1123,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:268 Passed:239 Failed:3
1692285454230,385,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:269 Passed:240 Failed:3
1692285455040,808,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:270 Passed:241 Failed:3
1692285456044,774,selenium_create_issue:open_quick_create,Success,True,
1692285457791,1186,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285457792,1747,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285457792,2522,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:271 Passed:242 Failed:3
1692285458683,656,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285460168,676,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285460168,2141,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:272 Passed:243 Failed:3
1692285460481,312,selenium_save_comment:open_comment_form,Success,True,
1692285462857,1704,selenium_save_comment:submit_form,Success,True,
1692285462857,2687,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:273 Passed:244 Failed:3
1692285496724,33865,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:274 Passed:245 Failed:3
1692285502376,5650,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:275 Passed:246 Failed:3
1692285507029,4651,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:276 Passed:247 Failed:3
1692285512940,5910,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:277 Passed:248 Failed:3
1692285517548,4606,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:278 Passed:249 Failed:3
1692285521662,4112,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:279 Passed:250 Failed:3
1692285524589,2925,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:280 Passed:251 Failed:3


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================== 14 passed, 1 warning in 73.21s (0:01:13) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285525404,769,selenium_login:open_login_page,Success,True,
1692285608493,83088,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692285608493,83858,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '206702', 'issue_key': 'AAFAIA-1194', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285524.6340547
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285608.4926753
timing = '83858'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:281 Passed:251 Failed:4
stest_1_selenium_view_project_summary,Total:282 Passed:251 Failed:4
stest_1_selenium_browse_projects_list,Total:283 Passed:251 Failed:4
stest_1_selenium_browse_boards_list,Total:284 Passed:251 Failed:4
stest_1_selenium_create_issue,Total:285 Passed:251 Failed:4
stest_1_selenium_edit_issue,Total:286 Passed:251 Failed:4
stest_1_selenium_save_comment,Total:287 Passed:251 Failed:4
stest_1_selenium_search_jql,Total:288 Passed:251 Failed:4
stest_1_selenium_view_backlog_for_scrum_board,Total:289 Passed:251 Failed:4
stest_1_selenium_view_scrum_board,Total:290 Passed:251 Failed:4
stest_1_selenium_view_kanban_board,Total:291 Passed:251 Failed:4
stest_1_selenium_view_dashboard,Total:292 Passed:251 Failed:4
stest_1_selenium_view_issue,Total:293 Passed:251 Failed:4
stest_2_selenium_z_log_out,Total:294 Passed:251 Failed:4


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '206702', 'issue_key': 'AAFAIA-1194', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285524.6340547
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285608.4926753
timing = '83858'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 144.47s (0:02:24) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285670171,1041,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692285673241,3069,selenium_login:login_and_view_dashboard,Success,True,
1692285673241,4111,selenium_login,Success,True,
.test_0_selenium_a_login,Total:295 Passed:252 Failed:4
1692285675077,1559,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:296 Passed:253 Failed:4
1692285676092,1013,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:297 Passed:254 Failed:4
1692285677395,1301,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:298 Passed:255 Failed:4
1692285678845,1204,selenium_create_issue:open_quick_create,Success,True,
1692285681030,1695,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692285681030,2185,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692285681030,3389,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:299 Passed:256 Failed:4
1692285682408,1131,selenium_edit_issue:open_edit_issue_form,Success,True,
1692285685562,2336,selenium_edit_issue:save_edit_issue_form,Success,True,
1692285685562,4285,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:300 Passed:257 Failed:4
1692285693564,8000,selenium_save_comment:open_comment_form,Success,True,
1692285709010,12927,selenium_save_comment:submit_form,Success,True,
1692285709010,23446,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:301 Passed:258 Failed:4
1692285731153,22142,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:302 Passed:259 Failed:4
1692285735452,4297,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:303 Passed:260 Failed:4
1692285739599,4145,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:304 Passed:261 Failed:4
1692285742154,2552,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:305 Passed:262 Failed:4
1692285743386,1231,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:306 Passed:263 Failed:4
1692285745018,1630,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:307 Passed:264 Failed:4
1692285746978,1958,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:308 Passed:265 Failed:4


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================== 14 passed, 1 warning in 77.86s (0:01:17) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285747958,931,selenium_login:open_login_page,Success,True,
1692285828660,80702,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692285828660,81634,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209045', 'issue_key': 'AAFAIA-3537', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285747.0254526
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285828.66012
timing = '81634'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:309 Passed:265 Failed:5
stest_1_selenium_view_project_summary,Total:310 Passed:265 Failed:5
stest_1_selenium_browse_projects_list,Total:311 Passed:265 Failed:5
stest_1_selenium_browse_boards_list,Total:312 Passed:265 Failed:5
stest_1_selenium_create_issue,Total:313 Passed:265 Failed:5
stest_1_selenium_edit_issue,Total:314 Passed:265 Failed:5
stest_1_selenium_save_comment,Total:315 Passed:265 Failed:5
stest_1_selenium_search_jql,Total:316 Passed:265 Failed:5
stest_1_selenium_view_backlog_for_scrum_board,Total:317 Passed:265 Failed:5
stest_1_selenium_view_scrum_board,Total:318 Passed:265 Failed:5
stest_1_selenium_view_kanban_board,Total:319 Passed:265 Failed:5
stest_1_selenium_view_dashboard,Total:320 Passed:265 Failed:5
stest_1_selenium_view_issue,Total:321 Passed:265 Failed:5
stest_2_selenium_z_log_out,Total:322 Passed:265 Failed:5


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209045', 'issue_key': 'AAFAIA-3537', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285747.0254526
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285828.66012
timing = '81634'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 142.31s (0:02:22) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692285890773,1413,selenium_login:open_login_page,Success,True,
1692285976163,85389,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692285976163,86803,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209827', 'issue_key': 'AAFAIA-4319', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285889.3596969
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285976.1631618
timing = '86803'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:323 Passed:265 Failed:6
stest_1_selenium_view_project_summary,Total:324 Passed:265 Failed:6
stest_1_selenium_browse_projects_list,Total:325 Passed:265 Failed:6
stest_1_selenium_browse_boards_list,Total:326 Passed:265 Failed:6
stest_1_selenium_create_issue,Total:327 Passed:265 Failed:6
stest_1_selenium_edit_issue,Total:328 Passed:265 Failed:6
stest_1_selenium_save_comment,Total:329 Passed:265 Failed:6
stest_1_selenium_search_jql,Total:330 Passed:265 Failed:6
stest_1_selenium_view_backlog_for_scrum_board,Total:331 Passed:265 Failed:6
stest_1_selenium_view_scrum_board,Total:332 Passed:265 Failed:6
stest_1_selenium_view_kanban_board,Total:333 Passed:265 Failed:6
stest_1_selenium_view_dashboard,Total:334 Passed:265 Failed:6
stest_1_selenium_view_issue,Total:335 Passed:265 Failed:6
stest_2_selenium_z_log_out,Total:336 Passed:265 Failed:6


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209827', 'issue_key': 'AAFAIA-4319', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692285889.3596969
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692285976.1631618
timing = '86803'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 147.46s (0:02:27) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286037937,1091,selenium_login:open_login_page,Success,True,
1692286121207,83269,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692286121207,84361,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209876', 'issue_key': 'AAFAIA-4368', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286036.845152
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286121.2070072
timing = '84361'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:337 Passed:265 Failed:7
stest_1_selenium_view_project_summary,Total:338 Passed:265 Failed:7
stest_1_selenium_browse_projects_list,Total:339 Passed:265 Failed:7
stest_1_selenium_browse_boards_list,Total:340 Passed:265 Failed:7
stest_1_selenium_create_issue,Total:341 Passed:265 Failed:7
stest_1_selenium_edit_issue,Total:342 Passed:265 Failed:7
stest_1_selenium_save_comment,Total:343 Passed:265 Failed:7
stest_1_selenium_search_jql,Total:344 Passed:265 Failed:7
stest_1_selenium_view_backlog_for_scrum_board,Total:345 Passed:265 Failed:7
stest_1_selenium_view_scrum_board,Total:346 Passed:265 Failed:7
stest_1_selenium_view_kanban_board,Total:347 Passed:265 Failed:7
stest_1_selenium_view_dashboard,Total:348 Passed:265 Failed:7
stest_1_selenium_view_issue,Total:349 Passed:265 Failed:7
stest_2_selenium_z_log_out,Total:350 Passed:265 Failed:7


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209876', 'issue_key': 'AAFAIA-4368', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286036.845152
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286121.2070072
timing = '84361'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 145.01s (0:02:25) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286184028,2145,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692286189367,5338,selenium_login:login_and_view_dashboard,Success,True,
1692286189367,7485,selenium_login,Success,True,
.test_0_selenium_a_login,Total:351 Passed:266 Failed:7
1692286193138,3511,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:352 Passed:267 Failed:7
1692286195167,2028,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:353 Passed:268 Failed:7
1692286202121,6952,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:354 Passed:269 Failed:7
1692286211446,9062,selenium_create_issue:open_quick_create,Success,True,
1692286222451,10411,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692286222451,11005,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692286222451,20067,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:355 Passed:270 Failed:7
1692286230679,7972,selenium_edit_issue:open_edit_issue_form,Success,True,
1692286240501,8390,selenium_edit_issue:save_edit_issue_form,Success,True,
1692286240501,17794,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:356 Passed:271 Failed:7
1692286243016,2513,selenium_save_comment:open_comment_form,Success,True,
1692286251940,7055,selenium_save_comment:submit_form,Success,True,
1692286251940,11437,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:357 Passed:272 Failed:7
1692286279680,27738,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:358 Passed:273 Failed:7
1692286282976,3295,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:359 Passed:274 Failed:7
1692286285562,2584,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:360 Passed:275 Failed:7
1692286288401,2837,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:361 Passed:276 Failed:7
1692286290040,1638,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:362 Passed:277 Failed:7
1692286292249,2207,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:363 Passed:278 Failed:7
1692286293368,1117,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:364 Passed:279 Failed:7


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 111.50s (0:01:51) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286293893,478,selenium_login:open_login_page,Success,True,
1692286373826,79932,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692286373827,80412,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209829', 'issue_key': 'AAFAIA-4321', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286293.4143255
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286373.8264408
timing = '80412'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:365 Passed:279 Failed:8
stest_1_selenium_view_project_summary,Total:366 Passed:279 Failed:8
stest_1_selenium_browse_projects_list,Total:367 Passed:279 Failed:8
stest_1_selenium_browse_boards_list,Total:368 Passed:279 Failed:8
stest_1_selenium_create_issue,Total:369 Passed:279 Failed:8
stest_1_selenium_edit_issue,Total:370 Passed:279 Failed:8
stest_1_selenium_save_comment,Total:371 Passed:279 Failed:8
stest_1_selenium_search_jql,Total:372 Passed:279 Failed:8
stest_1_selenium_view_backlog_for_scrum_board,Total:373 Passed:279 Failed:8
stest_1_selenium_view_scrum_board,Total:374 Passed:279 Failed:8
stest_1_selenium_view_kanban_board,Total:375 Passed:279 Failed:8
stest_1_selenium_view_dashboard,Total:376 Passed:279 Failed:8
stest_1_selenium_view_issue,Total:377 Passed:279 Failed:8
stest_2_selenium_z_log_out,Total:378 Passed:279 Failed:8


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '209829', 'issue_key': 'AAFAIA-4321', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286293.4143255
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286373.8264408
timing = '80412'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 141.11s (0:02:21) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286438331,3781,selenium_login:open_login_page,Success,True,
1692286520780,82448,selenium_login:login_and_view_dashboard,Failed measure: selenium_login:login_and_view_dashboard - TimeoutException,False,
1692286520780,86230,selenium_login,Failed measure: selenium_login - Exception,False,
FAction: test_0_selenium_a_login, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '212517', 'issue_key': 'AAFAIA-7009', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286434.548735
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286520.7796376
timing = '86230'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

Etest_0_selenium_a_login,Total:379 Passed:279 Failed:9
stest_1_selenium_view_project_summary,Total:380 Passed:279 Failed:9
stest_1_selenium_browse_projects_list,Total:381 Passed:279 Failed:9
stest_1_selenium_browse_boards_list,Total:382 Passed:279 Failed:9
stest_1_selenium_create_issue,Total:383 Passed:279 Failed:9
stest_1_selenium_edit_issue,Total:384 Passed:279 Failed:9
stest_1_selenium_save_comment,Total:385 Passed:279 Failed:9
stest_1_selenium_search_jql,Total:386 Passed:279 Failed:9
stest_1_selenium_view_backlog_for_scrum_board,Total:387 Passed:279 Failed:9
stest_1_selenium_view_scrum_board,Total:388 Passed:279 Failed:9
stest_1_selenium_view_kanban_board,Total:389 Passed:279 Failed:9
stest_1_selenium_view_dashboard,Total:390 Passed:279 Failed:9
stest_1_selenium_view_issue,Total:391 Passed:279 Failed:9
stest_2_selenium_z_log_out,Total:392 Passed:279 Failed:9


==================================== ERRORS ====================================
_________________ ERROR at teardown of test_0_selenium_a_login _________________

request = <SubRequest 'jira_screen_shots' for <Function test_0_selenium_a_login>>
jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>

    @pytest.fixture
    def jira_screen_shots(request, jira_webdriver):
        yield
>       get_screen_shots(request, jira_webdriver)

selenium_ui/conftest.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/conftest.py:440: in get_screen_shots
    webdriver.save_screenshot('{}.png'.format(error_artifact_name))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:826: in save_screenshot
    return self.get_screenshot_as_file(filename)
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode("ascii"))
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)["value"]
/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ae2812450>
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 1...wn>\\n#19 0x562251a2a847 \\u003Cunknown>\\n#20 0x562251a3a243 \\u003Cunknown>\\n#21 0x7fa7a4494ea7 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000
E         (Session info: headless chrome=115.0.5790.170)
E       Stacktrace:
E       #0 0x562251a414e3 <unknown>
E       #1 0x562251770c76 <unknown>
E       #2 0x56225175a284 <unknown>
E       #3 0x562251759fa0 <unknown>
E       #4 0x5622517589bf <unknown>
E       #5 0x562251759162 <unknown>
E       #6 0x56225177af9c <unknown>
E       #7 0x5622517f0bc2 <unknown>
E       #8 0x5622517cc012 <unknown>
E       #9 0x5622517e430e <unknown>
E       #10 0x5622517cbde3 <unknown>
E       #11 0x5622517a12dd <unknown>
E       #12 0x5622517a234e <unknown>
E       #13 0x562251a013e4 <unknown>
E       #14 0x562251a053d7 <unknown>
E       #15 0x562251a0fb20 <unknown>
E       #16 0x562251a06023 <unknown>
E       #17 0x5622519d41aa <unknown>
E       #18 0x562251a2a6b8 <unknown>
E       #19 0x562251a2a847 <unknown>
E       #20 0x562251a3a243 <unknown>
E       #21 0x7fa7a4494ea7 start_thread

/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException
=================================== FAILURES ===================================
___________________________ test_0_selenium_a_login ____________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '212517', 'issue_key': 'AAFAIA-7009', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_0_selenium_a_login(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.login(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:74: in login
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286434.548735
error_msg = 'Failed measure: selenium_login - Exception'
full_exception = Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286520.7796376
timing = '86230'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_login - Exception', Exception('Failed measure: selenium_login:login_and_view_dashboard - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_0_selenium_a_login - Exception: ('Failed ...
ERROR selenium_ui/jira_ui.py::test_0_selenium_a_login - selenium.common.excep...
======== 1 failed, 13 skipped, 1 warning, 1 error in 146.91s (0:02:26) =========
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286582726,1234,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692286628686,45959,selenium_login:login_and_view_dashboard,Success,True,
1692286628686,47194,selenium_login,Success,True,
.test_0_selenium_a_login,Total:393 Passed:280 Failed:9
1692286632862,3884,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:394 Passed:281 Failed:9
1692286634530,1667,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:395 Passed:282 Failed:9
1692286645125,10593,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:396 Passed:283 Failed:9
1692286649988,4588,selenium_create_issue:open_quick_create,Success,True,
1692286654783,4260,selenium_create_issue:fill_and_submit_issue_form:submit_issue_form,Success,True,
1692286654783,4794,selenium_create_issue:fill_and_submit_issue_form,Success,True,
1692286654783,9383,selenium_create_issue,Success,True,
.test_1_selenium_create_issue,Total:397 Passed:284 Failed:9
1692286657063,2090,selenium_edit_issue:open_edit_issue_form,Success,True,
1692286660403,1886,selenium_edit_issue:save_edit_issue_form,Success,True,
1692286660403,5430,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:398 Passed:285 Failed:9
1692286661662,1258,selenium_save_comment:open_comment_form,Success,True,
1692286666318,2780,selenium_save_comment:submit_form,Success,True,
1692286666318,5913,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:399 Passed:286 Failed:9
1692286683398,17078,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:400 Passed:287 Failed:9
1692286686554,3155,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:401 Passed:288 Failed:9
1692286689138,2582,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:402 Passed:289 Failed:9
1692286696610,7470,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:403 Passed:290 Failed:9
1692286705377,8766,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:404 Passed:291 Failed:9
1692286708588,3209,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:405 Passed:292 Failed:9
1692286712122,3533,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:406 Passed:293 Failed:9


=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 14 passed, 1 warning in 130.65s (0:02:10) ===================
============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /dc-app-performance-toolkit/app
plugins: xdist-3.3.1, apiritif-1.1.3
collected 14 items

selenium_ui/jira_ui.py get driver from global
clear browser cookies
1692286713648,1481,selenium_login:open_login_page,Success,True,
node_id:jira-0
1692286732359,18711,selenium_login:login_and_view_dashboard,Success,True,
1692286732359,20193,selenium_login,Success,True,
.test_0_selenium_a_login,Total:407 Passed:294 Failed:9
1692286735431,2788,selenium_project_summary,Success,True,
.test_1_selenium_view_project_summary,Total:408 Passed:295 Failed:9
1692286737344,1912,selenium_browse_projects_list,Success,True,
.test_1_selenium_browse_projects_list,Total:409 Passed:296 Failed:9
1692286750125,12779,selenium_browse_boards_list,Success,True,
.test_1_selenium_browse_boards_list,Total:410 Passed:297 Failed:9
1692286770642,20229,selenium_create_issue:open_quick_create,Failed measure: selenium_create_issue:open_quick_create - TimeoutException,False,
1692286770642,20230,selenium_create_issue,Failed measure: selenium_create_issue - Exception,False,
FAction: test_1_selenium_create_issue, Error: jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '211066', 'issue_key': 'AAFAIA-5558', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_1_selenium_create_issue(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.create_issue(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:127: in create_issue
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286750.4114985
error_msg = 'Failed measure: selenium_create_issue - Exception'
full_exception = Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286770.6417537
timing = '20230'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_create_issue - Exception', Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception

test_1_selenium_create_issue,Total:411 Passed:297 Failed:10
1692286791899,8913,selenium_edit_issue:open_edit_issue_form,Success,True,
1692286801126,6946,selenium_edit_issue:save_edit_issue_form,Success,True,
1692286801126,18140,selenium_edit_issue,Success,True,
.test_1_selenium_edit_issue,Total:412 Passed:298 Failed:10
1692286803812,2684,selenium_save_comment:open_comment_form,Success,True,
1692286820996,15286,selenium_save_comment:submit_form,Success,True,
1692286820996,19868,selenium_save_comment,Success,True,
.test_1_selenium_save_comment,Total:413 Passed:299 Failed:10
1692286853146,32148,selenium_search_jql,Success,True,
.test_1_selenium_search_jql,Total:414 Passed:300 Failed:10
1692286858100,4952,selenium_view_scrum_board_backlog,Success,True,
.test_1_selenium_view_backlog_for_scrum_board,Total:415 Passed:301 Failed:10
1692286862295,4193,selenium_view_scrum_board,Success,True,
.test_1_selenium_view_scrum_board,Total:416 Passed:302 Failed:10
1692286867395,5098,selenium_view_kanban_board,Success,True,
.test_1_selenium_view_kanban_board,Total:417 Passed:303 Failed:10
1692286868726,1330,selenium_view_dashboard,Success,True,
.test_1_selenium_view_dashboard,Total:418 Passed:304 Failed:10
1692286870288,1560,selenium_view_issue,Success,True,
.test_1_selenium_view_issue,Total:419 Passed:305 Failed:10
1692286871742,1452,selenium_log_out,Success,True,
.test_2_selenium_z_log_out,Total:420 Passed:306 Failed:10


=================================== FAILURES ===================================
_________________________ test_1_selenium_create_issue _________________________

jira_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4137db9d14a047a505e07aeb5570850a")>
jira_datasets = {'custom_issues': [], 'issue_id': '211066', 'issue_key': 'AAFAIA-5558', 'issues': [['AABIS-1', '914565', 'AABIS'], ['A...', 'AABIS'], ['AABIS-4', '914568', 'AABIS'], ['AABIS-5', '914569', 'AABIS'], ['AABIS-6', '914570', 'AABIS'], ...], ...}
jira_screen_shots = None

    def test_1_selenium_create_issue(jira_webdriver, jira_datasets, jira_screen_shots):
>       modules.create_issue(jira_webdriver, jira_datasets)

selenium_ui/jira_ui.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
selenium_ui/jira/modules.py:127: in create_issue
    measure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}, node_ip = '', start = 1692286750.4114985
error_msg = 'Failed measure: selenium_create_issue - Exception'
full_exception = Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException())
success = False, exc_type = <class 'Exception'>, end = 1692286770.6417537
timing = '20230'
lockfile = '/dc-app-performance-toolkit/app/results/jira/2023-08-17_14-54-59/selenium.jtl.lock'

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if LOGIN_ACTION_NAME in interaction:
            globals.login_failed = False
        if globals.login_failed:
            pytest.skip("login is failed")
        node_ip = ""
        start = time()
        error_msg = 'Success'
        full_exception = ''
        if args:
            driver = [arg for arg in args if isinstance(arg, Chrome)]
            node_ip = "" if not driver else getattr(driver[0], "node_ip", "")
        try:
            func(*args, **kwargs)
            success = True
        except Exception:
            success = False
            # https://docs.python.org/2/library/sys.html#sys.exc_info
            exc_type, full_exception = sys.exc_info()[:2]
            error_msg = f"Failed measure: {interaction} - {exc_type.__name__}"
        end = time()
        timing = str(int((end - start) * 1000))
    
        lockfile = f'{selenium_results_file}.lock'
    
        with filelock.SoftFileLock(lockfile):
            with open(selenium_results_file, "a+") as jtl_file:
                timestamp = round(time() * 1000)
                if explicit_timing:
                    jtl_file.write(f"{timestamp},{explicit_timing*1000},{interaction},,{error_msg},"
                                   f",{success},0,0,0,0,,0\n")
                else:
                    jtl_file.write(f"{timestamp},{timing},{interaction},,{error_msg}"
                                   f",,{success},0,0,0,0,{node_ip},0\n")
    
        print(f"{timestamp},{timing},{interaction},{error_msg},{success},{node_ip}")
    
        if not success:
            if LOGIN_ACTION_NAME in interaction:
                globals.login_failed = True
>           raise Exception(error_msg, full_exception)
E           Exception: ('Failed measure: selenium_create_issue - Exception', Exception('Failed measure: selenium_create_issue:open_quick_create - TimeoutException', TimeoutException()))

selenium_ui/conftest.py:169: Exception
=============================== warnings summary ===============================
../../root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204
  /root/.bzt/python-packages/3.11.4/_pytest/config/__init__.py:1204: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: apiritif
    self._mark_plugins_for_rewrite(hook)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED selenium_ui/jira_ui.py::test_1_selenium_create_issue - Exception: ('Fa...
============= 1 failed, 13 passed, 1 warning in 159.59s (0:02:39) ==============
